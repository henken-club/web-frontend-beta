interface Activity implements Node {
  createdAt: DateTime!
  id: ID!
}

type ActivityConnection implements Connection {
  edges: [ActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ActivityEdge implements Edge {
  cursor: String!
  node: Activity!
}

input ActivityOrder {
  direction: OrderDirection!
  field: ActivityOrderField!
}

enum ActivityOrderField {
  CREATED_AT
}

type Answer implements Node {
  comment: String!
  createdAt: DateTime!
  henken: Henken!
  id: ID!
  type: AnswerType!
  updatedAt: DateTime!
}

type AnswerEdge implements Edge {
  cursor: String!
  node: Answer!
}

enum AnswerType {
  RIGHT
  WRONG
}

type Author implements Node {
  id: ID!
  name: String!
  writings(after: String, before: String, first: Int, last: Int, orderBy: AuthorWritingsOrder!): WritingConnection!
}

type AuthorEdge implements Edge {
  cursor: String!
  node: Author!
}

enum AuthorWritingOrderField {
  BOOK_TITLE
}

input AuthorWritingsOrder {
  direction: OrderDirection!
  field: AuthorWritingOrderField!
}

type Book implements Node {
  cover: String
  id: ID!
  isbn: String
  title: String!
  writings(after: String, before: String, first: Int, last: Int, orderBy: BookWritingsOrder!): WritingConnection!
}

type BookConnection implements Connection {
  edges: [BookEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BookEdge implements Edge {
  cursor: String!
  node: Book!
}

input BookOrder {
  direction: OrderDirection!
  field: BookOrderField!
}

enum BookOrderField {
  NAME
}

type BookSeries implements Node {
  id: ID!
  title: String!
}

type BookSeriesEdge implements Edge {
  cursor: String!
  node: BookSeries!
}

type BookSeriesPart implements Node {
  book: Book!
  id: ID!
  series: BookSeries!
}

type BookSeriesPartEdge implements Edge {
  cursor: String!
  node: BookSeriesPart!
}

input BookWritingsOrder {
  direction: OrderDirection!
  field: BookWritingsOrderField!
}

enum BookWritingsOrderField {
  AUTHOR_NAME
}

interface Connection {
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

enum ContentType {
  AUTHOR
  BOOK
  BOOK_SERIES
}

union ContentUnion = Author | Book | BookSeries

enum CreateHenkenArgsContentType {
  AUTHOR
  BOOK
  BOOK_SERIES
  TEMP_CONTENT
}

type CreateHenkenPayload {
  henken: Henken!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

interface Edge {
  cursor: String!
  node: Node!
}

type FindAnswerPayload {
  answer: Answer
}

type FindHenkenPayload {
  henken: Henken
}

type FindUserPayload {
  user: User
}

type Following implements Node {
  from: User!
  id: ID!
  to: User!
}

type FollowingConnection implements Connection {
  edges: [FollowingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type FollowingEdge implements Edge {
  cursor: String!
  node: Following!
}

input FollowingOrder {
  direction: OrderDirection!
  field: FollowingOrderField!
}

enum FollowingOrderField {
  FOLLOWED_AT
}

type Henken implements Node {
  answer: Answer
  comment: String!
  content: HenkenContentUnion!
  createdAt: DateTime!
  id: ID!
  postedBy: User!
  postsTo: User!
  updatedAt: DateTime!
}

type HenkenConnection implements Connection {
  edges: [HenkenEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

union HenkenContentUnion = Author | Book | BookSeries | TempContent

type HenkenEdge implements Edge {
  cursor: String!
  node: Henken!
}

input HenkenOrder {
  direction: OrderDirection!
  field: HenkenOrderField!
}

enum HenkenOrderField {
  CREATED_AT
  UPDATED_AT
}

type Mutation {
  createHenken(comment: String = "", contentId: ID!, contentType: CreateHenkenArgsContentType!, toUserId: ID!): CreateHenkenPayload!
  registerUser(alias: String!, avatar: String!, displayName: String!): RegisterUserPayload!
}

interface Node {
  id: ID!
}

interface Notification implements Node {
  createdAt: DateTime!
  id: ID!
  read: Boolean!
}

type NotificationConnection implements Connection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NotificationEdge implements Edge {
  cursor: String!
  node: Notification!
}

input NotificationOrder {
  direction: OrderDirection!
  field: NotificationOrderField!
}

enum NotificationOrderField {
  CREATED_AT
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PostAnswerActivity implements Activity & Node {
  createdAt: DateTime!
  id: ID!
}

type Query {
  answer(id: ID!): Answer!
  author(id: ID!): Author!
  book(id: ID!): Book!
  bookseries(id: ID!): BookSeries!
  findAnswer(id: ID!): FindAnswerPayload!
  findHenken(id: ID!): FindHenkenPayload!
  findUser(alias: String, id: ID): FindUserPayload!
  henken(id: ID!): Henken!
  manyBooks(after: String, before: String, first: Int, last: Int, orderBy: BookOrder!): BookConnection!
  manyHenkens(after: String, before: String, first: Int, last: Int, orderBy: HenkenOrder!): HenkenConnection!
  manyUsers(after: String, before: String, first: Int, last: Int, orderBy: UserOrder!): UserConnection!
  notifications(after: String, before: String, first: Int, last: Int, orderBy: NotificationOrder!): NotificationConnection!
  searchContent(filter: SearchContentFilter!, limit: Int!, query: String!, skip: Int = 0): SearchContentPayload!
  searchUser(limit: Int!, query: String!, skip: Int = 0): SearchUserPayload!
  user(id: ID!): User!

  """Return current user. Return `null` if user not registered"""
  viewer: User
}

type ReceivedAnswerActivity implements Activity & Node {
  createdAt: DateTime!
  id: ID!
}

type ReceivedAnswerNotification implements Node & Notification {
  answer: Answer!
  createdAt: DateTime!
  id: ID!
  read: Boolean!
}

type ReceivedHenkenActivity implements Activity & Node {
  createdAt: DateTime!
  id: ID!
}

type ReceivedHenkenNotification implements Node & Notification {
  createdAt: DateTime!
  henken: Henken!
  id: ID!
  read: Boolean!
}

type RegisterUserPayload {
  user: User!
}

input SearchContentFilter {
  type: SearchContentFilterType = null
}

enum SearchContentFilterType {
  AUTHOR
  BOOK
  BOOK_SERIES
}

type SearchContentPayload {
  results: [SearchContentResult!]!
}

type SearchContentResult {
  content: ContentUnion!
}

type SearchUserPayload {
  results: [SearchUserResult!]!
}

type SearchUserResult {
  user: User!
}

type SendHenkenActivity implements Activity & Node {
  createdAt: DateTime!
  id: ID!
}

type TempContent implements Node {
  id: ID!
  name: String!
  type: ContentType!
}

type User implements Node {
  activities(after: String, before: String, first: Int, last: Int, orderBy: ActivityOrder!): ActivityConnection!
  alias: String!
  avatar: String!
  displayName: String!
  followees(after: String, before: String, first: Int, last: Int, orderBy: FollowingOrder!): FollowingConnection!
  followers(after: String, before: String, first: Int, last: Int, orderBy: FollowingOrder!): FollowingConnection!
  id: ID!
  postsHenkens(after: String, before: String, filter: UserPostsHenkensFilter, first: Int, last: Int, orderBy: HenkenOrder!): HenkenConnection!
  receivedHenkens(after: String, before: String, filter: UserReceivedHenkensFilter, first: Int, last: Int, orderBy: HenkenOrder!): HenkenConnection!
}

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}

input UserPostsHenkensFilter {
  to: ID!
}

input UserReceivedHenkensFilter {
  from: ID!
}

type Writing implements Node {
  author: Author!
  book: Book!
  id: ID!
}

type WritingConnection implements Connection {
  edges: [WritingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WritingEdge implements Edge {
  cursor: String!
  node: Writing!
}
